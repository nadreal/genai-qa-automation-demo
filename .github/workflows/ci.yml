name: web-automation-demo
on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker layer cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        run: docker build -t web-automation-demo .      
     
      - name: Setup Python venv
        run: python -m venv env && source env/bin/activate

      - name: Install dependencies
        run: pip install -r requirements.txt
    
      - name: Setup Node.js (for allure CLI)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      
      - name: Install Java (required for Allure)
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre unzip

      - name: Install Allure standalone (official tarball) and symlink
        run: |
          # Set version you want:
          ALLURE_VERSION=2.18.1

          # Download and extract
          curl -sL "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz" -o /tmp/allure.tgz
          sudo mkdir -p /opt/allure
          sudo tar -xzf /tmp/allure.tgz -C /opt
          
          # The tarball expands to /opt/allure-<version>, create a stable symlink and symlink binary to PATH
          sudo ln -sfn /opt/allure-${ALLURE_VERSION} /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure || true

          # Verify
          allure --version || (ls -la /opt && echo "--- contents ---" && ls -la /opt/allure/bin && exit 1)

      - name: Run tests inside Docker
        continue-on-error: true 
        run: |
          mkdir -p allure-results allure-report docs
          docker run --rm \
            -v "${{ github.workspace }}/allure-results:/allure-results" \
            -v "${{ github.workspace }}/allure-report:/allure-report" \
            web-automation-demo \
            sh -c "pytest --alluredir=/allure-results || true
      - name: Generate Allure Report
        run: allure generate allure-results --clean -o allure-report

      - name: Upload Allure results artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Upload Allure HTML report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report
  
  deploy-allure:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Download Allure report artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: ./allure-report

      - name: Deploy Allure report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
      - name: Upload HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report
          path: docs/report.html
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install newman
        run: npm install -g newman newman-reporter-html

      - name: Run Postman collection
        continue-on-error: true
        run: |
          mkdir -p docs
          if [ -f data/collection.json ]; then
            newman run data/collection.json \
              -r cli,json,html \
              --reporter-json-export docs/postman-report.json \
              --reporter-html-export docs/postman-report.html \
              --suppress-exit-code      # <-- also prevents non-zero exit status
          else
            echo "No Postman collection found at data/collection.json; skipping."
          fi
      - name: Upload newman report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: postman-report
          path: docs/

