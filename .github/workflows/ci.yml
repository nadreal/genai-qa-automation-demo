name: web-automation-demo
on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker layer cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.python-version }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.python-version }}-

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create venv
        run: python -m venv env && source env/bin/activate

      - name: Install dependencies
        run: pip install -r requirements.txt

      # Ensure Java is installed for Allure
      - name: Install Java (required for Allure)
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre unzip curl

      # Install standalone Allure from Maven Central and symlink binary to PATH (robust)
      - name: Install Allure standalone (official tarball) and symlink
        run: |
          set -euo pipefail

          ALLURE_VERSION=2.18.1
          TARBALL="/tmp/allure.tgz"

          echo "Downloading Allure ${ALLURE_VERSION}..."
          curl -sL "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz" -o "$TARBALL"

          echo "Extracting to /opt..."
          sudo mkdir -p /opt
          sudo tar -xzf "$TARBALL" -C /opt

          # Determine top-level directory in archive (robust)
          TOPDIR=$(tar -tzf "$TARBALL" | head -1 | cut -f1 -d"/")
          echo "Top-level dir in archive: $TOPDIR"

          if [ -d "/opt/${TOPDIR}" ]; then
            sudo ln -sfn "/opt/${TOPDIR}" /opt/allure
          else
            EXDIR=$(ls -d /opt/allure* 2>/dev/null | head -1 || true)
            if [ -n "$EXDIR" ]; then
              sudo ln -sfn "$EXDIR" /opt/allure
            else
              echo "ERROR: could not find extracted directory under /opt"
              ls -la /opt || true
              exit 1
            fi
          fi

          # Find the actual binary
          BINARY_PATH=$(find /opt/allure -type f -name 'allure' -print -quit || true)
          if [ -z "$BINARY_PATH" ]; then
            echo "No allure binary found under /opt/allure - dumping /opt for debug"
            ls -R /opt | sed -n '1,500p'
            exit 2
          fi

          echo "Found allure binary at: $BINARY_PATH"
          sudo ln -sfn "$BINARY_PATH" /usr/local/bin/allure
          sudo chmod +x /usr/local/bin/allure || true

          echo "Verification: which allure -> $(which allure || echo 'not on PATH')"
          echo "allure --version output:"
          allure --version || (echo "allure command failed" && ls -la /opt/allure && ls -la "$(dirname "$BINARY_PATH")" && exit 3)

      # Run tests inside container; do NOT run `allure generate` inside container.
      - name: Run tests inside Docker
        continue-on-error: true
        run: |
          mkdir -p allure-results allure-report docs
          docker run --rm \
            -v "${{ github.workspace }}/allure-results:/allure-results" \
            -v "${{ github.workspace }}/allure-report:/allure-report" \
            web-automation-demo \
            sh -c "pytest --alluredir=/allure-results || true"

      # Generate Allure HTML report on runner (host) using installed Allure
      - name: Generate Allure Report
        run: |
          set -euo pipefail
          # If there are no results, we still want to create an empty report directory
          if [ ! -d "allure-results" ] || [ -z "$(ls -A allure-results 2>/dev/null || true)" ]; then
            echo "No allure results found in allure-results/; creating empty report directory."
            mkdir -p allure-report
            echo "<!-- no allure results -->" > allure-report/index.html
          else
            allure generate allure-results --clean -o allure-report
          fi

      - name: Upload Allure results artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Upload Allure HTML report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Upload newman report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: postman-report
          path: docs/

  deploy-allure:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Download Allure report artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: ./allure-report

      - name: Deploy Allure report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
